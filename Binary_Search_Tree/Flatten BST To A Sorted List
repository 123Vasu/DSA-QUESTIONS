void dfs(TreeNode<int>* root , vector<int>&inOrder) {
    if(root == NULL) return;    

    dfs(root -> left , inOrder);     
    inOrder.push_back(root -> data);      
    dfs(root -> right , inOrder);    
}
TreeNode<int>* flatten(TreeNode<int>* root)
{
    // Write your code here   

    vector<int>inOrder;   
    dfs(root , inOrder);    

    int n = inOrder.size();    
    TreeNode<int>* newRoot = new TreeNode<int>(inOrder[0]);     
    TreeNode<int>* curr = newRoot;     

    for(int i = 1 ; i<n ; i++) {

        TreeNode<int>* temp = new TreeNode<int>(inOrder[i]);    
        
        curr -> left = NULL;   
        curr -> right = temp;   
        curr = temp;     

    }   

    curr -> left = NULL;  
    curr -> right = NULL;   

    return newRoot;  

}
