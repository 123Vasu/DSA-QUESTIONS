//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.    
    
 long long int merge( long long int arr[],  long long int l,  long long int m,  long long int r)
{
         // Your code here      
         long long int cnt = 0; 
         vector< long long int>temp;   
         
         
         long long int left = l;   
         long long int right = m+1;   
         
         while(left <= m && right <= r) {
             if(arr[left] <= arr[right]) {
                 temp.push_back(arr[left]);  
                 left++;     
             }
             
             else {
                 temp.push_back(arr[right]); 
                 cnt += (m - left + 1);          
                 right++;   
             }   
         }
         
         while(left <= m) {
             temp.push_back(arr[left]);  
             left++;   
         }   
         
         while(right <= r) {
             temp.push_back(arr[right]);  
             right++;   
         }   
         
         for(int i = l ; i<=r ; i++) {
             arr[i] = temp[i-l]; 
         }
         
         return cnt; 
         
    }   
    
     long long int mergeSort( long long int arr[],  long long int l,  long long int r)
    {
        //code here   
        
         long long int cnt = 0; 
        
        if(l >= r) return cnt;     
        
         long long int mid = (l + r) / 2;   
        
        cnt += mergeSort(arr , l , mid);   
        
        cnt += mergeSort(arr , mid + 1 , r);   
        
        cnt += merge(arr , l , mid , r);      
        
        return cnt; 
    }
    
    long long int inversionCount(long long arr[], int n) {
        // Your Code Here    
        
        return mergeSort(arr , 0 , n-1);   
    }
};

//{ Driver Code Starts.

int main() {

    long long T;
    cin >> T;

    while (T--) {
        int N;
        cin >> N;

        long long A[N];
        for (long long i = 0; i < N; i++) {
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A, N) << endl;
    }

    return 0;
}

// } Driver Code Ends
